{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","$blockTypesColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","blockTypeSort","totalNewBlockTypes","_cancelToken","_ignoreFailedRequest","fieldTypeInfo","$container","$fieldsColumnContainer","children","$fieldItemsOuterContainer","formatInputId","setContainerHeight","this","$item","newMatch","DragSort","i","$blockTypeItems","length","id","addListener","match","Math","height","getFieldTypeInfo","handle","getBlockTypeSettingsModal","blockTypeSettingsModal","onSubmit","proxy","BlockType","applySettings","name","maxColHeight","type","addFieldToSelectedBlockType","selectedBlockType","addField","addBlockType","show","getFieldTypeSettingsHtml","Promise","_fieldTypeSettingsHtml","t","appendTo","CancelToken","sendActionRequest","addItems","then","response","BlockTypeSettingsModal","resolve","reject","cancel","requestAnimationFrame","$handleHeading","axios","$handleInstructions","$handleInputContainer","token","data","namespace","handleGenerator","HandleGenerator","catch","$cancelBtn","$form","$deleteBtn","Modal","init","$bod","$body","hide","$nameField","$nameHeading","$nameLabel","$nameInstructions","onDeleteClick","$nameInputContainer","confirm","$nameErrorList","onDelete","$handleField","$handleLabel","$nameInput","$handleInput","$handleErrorList","startListening","$buttons","stopListening","$submitBtn","onFormSubmit","ev","preventDefault","visible","listening","updateTarget","attr","val","shake","$input","errors","$handleHiddenInput","addClass","removeClass","fieldSettings","displayErrors","configurator","isMobileBrowser","setTimeout","trigger","$settingsBtn","$fieldItemsContainer","$errorList","$fieldSettingsContainer","totalNewFields","onSortChange","$nameHiddenInput","fields","selectedField","fieldSort","deselect","find","insertBefore","$fieldItems","text","Field","$fieldItem","remove","$items","$translationSettingsContainer","blockType","initializedFieldTypeSettings","fieldTypeSettingsTemplates","showSettings","$requiredCheckbox","$typeSelect","setFieldType","select","updateNameLabel","onTypeSelectChange","$typeSettingsContainer","updateTranslationMethodSettings","selectedFieldType","html","$settings","footHtml","fresh","appendHeadHtml","headHtml","isNew","getDefaultFieldSettings","getFieldTypeSettings","getParsedFieldTypeHtml","settingsHtml","createTextField","required","createTextareaField","escapeHtml","updateHandleLabel","label","prop","fieldTypeOptions","push","detach","isMultiSite","append","initUiElements","createSelectField","appendFootHtml","targetPrefix","selfDestruct","noop","replace","data-id","ui","class","maxlength","createCheckboxField","checked","value","options","toggle","$translationKeyFormatContainer","confirmDelete","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend(\n        {\n            fieldTypeInfo: null,\n\n            inputNamePrefix: null,\n            fieldTypeSettingsNamespace: null,\n            inputIdPrefix: null,\n\n            $container: null,\n\n            $blockTypesColumnContainer: null,\n            $fieldsColumnContainer: null,\n            $fieldSettingsColumnContainer: null,\n\n            $blockTypeItemsOuterContainer: null,\n            $blockTypeItemsContainer: null,\n            $fieldItemsContainer: null,\n            $fieldSettingItemsContainer: null,\n\n            $newBlockTypeBtn: null,\n            $newFieldBtn: null,\n\n            blockTypes: null,\n            selectedBlockType: null,\n            blockTypeSort: null,\n            totalNewBlockTypes: 0,\n\n            _fieldTypeSettingsHtml: {},\n            _cancelToken: null,\n            _ignoreFailedRequest: false,\n\n            init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace) {\n                this.fieldTypeInfo = fieldTypeInfo;\n                this.inputNamePrefix = inputNamePrefix;\n                this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n                this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n                this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n                this.$fieldsColumnContainer = this.$container.children('.fields').children();\n                this.$fieldSettingsColumnContainer = this.$container.children('.field-settings').children();\n\n                this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.items');\n                this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.blocktypes');\n                this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.items');\n                this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.items');\n\n                this.setContainerHeight();\n\n                this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n                this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n                // Find the existing block types\n                this.blockTypes = {};\n\n                var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n                for (var i = 0; i < $blockTypeItems.length; i++) {\n                    var $item = $($blockTypeItems[i]),\n                        id = $item.data('id');\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n\n                    // Is this a new block type?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                        this.totalNewBlockTypes = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                    handle: '.move',\n                    axis: 'y'\n                });\n\n                this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n                this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n                this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n            },\n\n            setContainerHeight: function() {\n                setTimeout($.proxy(function() {\n                    var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                    this.$container.height(maxColHeight);\n                }, this), 1);\n            },\n\n            getFieldTypeInfo: function(type) {\n                for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                    if (this.fieldTypeInfo[i].type === type) {\n                        return this.fieldTypeInfo[i];\n                    }\n                }\n            },\n\n            addBlockType: function() {\n                this.getBlockTypeSettingsModal();\n\n                this.blockTypeSettingsModal.show();\n\n                this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                    this.totalNewBlockTypes++;\n                    var id = 'new' + this.totalNewBlockTypes;\n\n                    var $item = $(\n                        '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                        '<div class=\"name\"></div>' +\n                        '<div class=\"handle code\"></div>' +\n                        '<div class=\"actions\">' +\n                        '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                        '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                        '</div>' +\n                        '<input class=\"hidden\" name=\"types[craft\\\\fields\\\\Matrix][blockTypes][' + id + '][name]\">' +\n                        '<input class=\"hidden\" name=\"types[craft\\\\fields\\\\Matrix][blockTypes][' + id + '][handle]\">' +\n                        '</div>'\n                    ).appendTo(this.$blockTypeItemsContainer);\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n                    this.blockTypes[id].applySettings(name, handle);\n                    this.blockTypes[id].select();\n                    this.blockTypes[id].addField();\n\n                    this.blockTypeSort.addItems($item);\n                }, this);\n            },\n\n            addFieldToSelectedBlockType: function() {\n                if (this.selectedBlockType) {\n                    this.selectedBlockType.addField();\n                }\n            },\n\n            getBlockTypeSettingsModal: function() {\n                if (!this.blockTypeSettingsModal) {\n                    this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n                }\n\n                return this.blockTypeSettingsModal;\n            },\n\n            getFieldTypeSettingsHtml: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                        resolve(this._fieldTypeSettingsHtml[type]);\n                        return;\n                    }\n\n                    // Cancel the current request\n                    if (this._cancelToken) {\n                        this._ignoreFailedRequest = true;\n                        this._cancelToken.cancel();\n                        Garnish.requestAnimationFrame(() => {\n                            this._ignoreFailedRequest = false;\n                        });\n                    }\n\n                    // Create a cancel token\n                    this._cancelToken = axios.CancelToken.source();\n\n                    Craft.sendActionRequest('POST', 'fields/render-settings', {\n                        cancelToken: this._cancelToken.token,\n                        data: {\n                            type: type,\n                            namespace: this.fieldTypeSettingsNamespace,\n                        }\n                    }).then(response => {\n                        this._fieldTypeSettingsHtml[type] = response.data;\n                        resolve(response.data);\n                    }).catch(() => {\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                        reject();\n                    });\n                });\n            },\n        });\n\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend(\n        {\n            init: function() {\n                this.base();\n\n                this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n                this.setContainer(this.$form);\n\n                this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n                this.$nameField = $('<div class=\"field\"/>').appendTo(this.$body);\n                this.$nameHeading = $('<div class=\"heading\"/>').appendTo(this.$nameField);\n                this.$nameLabel = $('<label for=\"new-block-type-name\">' + Craft.t('app', 'Name') + '</label>').appendTo(this.$nameHeading);\n                this.$nameInstructions = $('<div class=\"instructions\"><p>' + Craft.t('app', 'What this block type will be called in the control panel.') + '</p></div>').appendTo(this.$nameHeading);\n                this.$nameInputContainer = $('<div class=\"input\"/>').appendTo(this.$nameField);\n                this.$nameInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"new-block-type-name\"/>').appendTo(this.$nameInputContainer);\n                this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo(this.$nameInputContainer).hide();\n                this.$handleField = $('<div class=\"field\"/>').appendTo(this.$body);\n                this.$handleHeading = $('<div class=\"heading\"/>').appendTo(this.$handleField);\n                this.$handleLabel = $('<label for=\"new-block-type-handle\">' + Craft.t('app', 'Handle') + '</label>').appendTo(this.$handleHeading);\n                this.$handleInstructions = $('<div class=\"instructions\"><p>' + Craft.t('app', 'How you’ll refer to this block type in the templates.') + '</p></div>').appendTo(this.$handleHeading);\n                this.$handleInputContainer = $('<div class=\"input\"/>').appendTo(this.$handleField);\n                this.$handleInput = $('<input type=\"text\" class=\"text fullwidth code\" id=\"new-block-type-handle\"/>').appendTo(this.$handleInputContainer);\n                this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo(this.$handleInputContainer).hide();\n                this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n                this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit\"/>').appendTo(this.$buttons);\n\n                this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n                this.addListener(this.$cancelBtn, 'click', 'hide');\n                this.addListener(this.$form, 'submit', 'onFormSubmit');\n                this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n            },\n\n            onFormSubmit: function(ev) {\n                ev.preventDefault();\n\n                // Prevent multi form submits with the return key\n                if (!this.visible) {\n                    return;\n                }\n\n                if (this.handleGenerator.listening) {\n                    // Give the handle a chance to catch up with the input\n                    this.handleGenerator.updateTarget();\n                }\n\n                // Basic validation\n                var name = Craft.trim(this.$nameInput.val()),\n                    handle = Craft.trim(this.$handleInput.val());\n\n                if (!name || !handle) {\n                    Garnish.shake(this.$form);\n                }\n                else {\n                    this.hide();\n                    this.onSubmit(name, handle);\n                }\n            },\n\n            onDeleteClick: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                    this.hide();\n                    this.onDelete();\n                }\n            },\n\n            show: function(name, handle, errors) {\n                this.$nameInput.val(typeof name === 'string' ? name : '');\n                this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n                if (!handle) {\n                    this.handleGenerator.startListening();\n                }\n                else {\n                    this.handleGenerator.stopListening();\n                }\n\n                if (typeof name === 'undefined') {\n                    this.$deleteBtn.addClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Create'));\n                }\n                else {\n                    this.$deleteBtn.removeClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Save'));\n                }\n\n                this.displayErrors('name', (errors ? errors.name : null));\n                this.displayErrors('handle', (errors ? errors.handle : null));\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n\n                this.base();\n            },\n\n            displayErrors: function(attr, errors) {\n                var $input = this['$' + attr + 'Input'],\n                    $errorList = this['$' + attr + 'ErrorList'];\n\n                $errorList.children().remove();\n\n                if (errors) {\n                    $input.addClass('error');\n                    $errorList.show();\n\n                    for (var i = 0; i < errors.length; i++) {\n                        $('<li/>').text(errors[i]).appendTo($errorList);\n                    }\n                }\n                else {\n                    $input.removeClass('error');\n                    $errorList.hide();\n                }\n            }\n        });\n\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend(\n        {\n            configurator: null,\n            id: null,\n            errors: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n            $nameHiddenInput: null,\n            $handleHiddenInput: null,\n            $settingsBtn: null,\n            $fieldItemsContainer: null,\n            $fieldSettingsContainer: null,\n\n            fields: null,\n            selectedField: null,\n            fieldSort: null,\n            totalNewFields: 0,\n            fieldSettings: null,\n\n            init: function(configurator, $item) {\n                this.configurator = configurator;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n                this.errors = this.$item.data('errors');\n\n                this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n                this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n                this.$nameLabel = this.$item.children('.name');\n                this.$handleLabel = this.$item.children('.handle');\n                this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n                this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n                this.$settingsBtn = this.$item.find('.settings');\n\n                // Find the field items container if it exists, otherwise create it\n                this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldItemsContainer.length) {\n                    this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n                }\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldSettingsContainer.length) {\n                    this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n                }\n\n                // Find the existing fields\n                this.fields = {};\n\n                var $fieldItems = this.$fieldItemsContainer.children();\n\n                for (var i = 0; i < $fieldItems.length; i++) {\n                    var $fieldItem = $($fieldItems[i]),\n                        id = $fieldItem.data('id');\n\n                    this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                    // Is this a new field?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewFields) {\n                        this.totalNewFields = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n                this.fieldSort = new Garnish.DragSort($fieldItems, {\n                    handle: '.move',\n                    axis: 'y',\n                    onSortChange: $.proxy(function() {\n                        // Adjust the field setting containers to match the new sort order\n                        for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                            var $item = $(this.fieldSort.$items[i]),\n                                id = $item.data('id'),\n                                field = this.fields[id];\n\n                            field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                        }\n                    }, this)\n                });\n            },\n\n            select: function() {\n                if (this.configurator.selectedBlockType === this) {\n                    return;\n                }\n\n                if (this.configurator.selectedBlockType) {\n                    this.configurator.selectedBlockType.deselect();\n                }\n\n                this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.configurator.selectedBlockType = this;\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.configurator.selectedBlockType = null;\n\n                if (this.selectedField) {\n                    this.selectedField.deselect();\n                }\n            },\n\n            showSettings: function() {\n                var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n                blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n                blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n                blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n            },\n\n            applySettings: function(name, handle) {\n                if (this.errors) {\n                    this.errors = null;\n                    this.$settingsBtn.removeClass('error');\n                }\n\n                this.$nameLabel.text(name);\n                this.$handleLabel.text(handle);\n                this.$nameHiddenInput.val(name);\n                this.$handleHiddenInput.val(handle);\n            },\n\n            addField: function() {\n                this.totalNewFields++;\n                var id = 'new' + this.totalNewFields;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                    '<div class=\"name\"><em class=\"light\">' + Craft.t('app', '(blank)') + '</em>&nbsp;</div>' +\n                    '<div class=\"handle code\">&nbsp;</div>' +\n                    '<div class=\"actions\">' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo(this.$fieldItemsContainer);\n\n                this.fields[id] = new Field(this.configurator, this, $item);\n                this.fields[id].select();\n\n                this.fieldSort.addItems($item);\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldItemsContainer.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.configurator.blockTypes[this.id] = null;\n                delete this.configurator.blockTypes[this.id];\n            }\n        });\n\n\n    var Field = Garnish.Base.extend(\n        {\n            configurator: null,\n            blockType: null,\n            id: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            selectedFieldType: null,\n            initializedFieldTypeSettings: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n\n            $fieldSettingsContainer: null,\n            $nameInput: null,\n            $handleInput: null,\n            $requiredCheckbox: null,\n            $typeSelect: null,\n            $translationSettingsContainer: null,\n            $typeSettingsContainer: null,\n            $deleteBtn: null,\n\n            init: function(configurator, blockType, $item) {\n                this.configurator = configurator;\n                this.blockType = blockType;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n\n                this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n                this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n                this.initializedFieldTypeSettings = {};\n                this.fieldTypeSettingsTemplates = {};\n\n                this.$nameLabel = this.$item.children('.name');\n                this.$handleLabel = this.$item.children('.handle');\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                var isNew = (!this.$fieldSettingsContainer.length);\n\n                if (isNew) {\n                    this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n                }\n\n                this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n                this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n                this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n                this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n                this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n                this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.fieldtype-settings:first');\n                this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n                if (isNew) {\n                    this.setFieldType('craft\\\\fields\\\\PlainText');\n                }\n                else {\n                    this.selectedFieldType = this.$typeSelect.val();\n                    this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n                }\n\n                if (!this.$handleInput.val()) {\n                    new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n                this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n                this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n                this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n                this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n            },\n\n            select: function() {\n                if (this.blockType.selectedField === this) {\n                    return;\n                }\n\n                if (this.blockType.selectedField) {\n                    this.blockType.selectedField.deselect();\n                }\n\n                this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.removeClass('hidden');\n                this.$fieldSettingsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.blockType.selectedField = this;\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.blockType.selectedField = null;\n            },\n\n            updateNameLabel: function() {\n                var val = this.$nameInput.val();\n                this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            },\n\n            updateHandleLabel: function() {\n                this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()) + '&nbsp;');\n            },\n\n            updateRequiredIcon: function() {\n                if (this.$requiredCheckbox.prop('checked')) {\n                    this.$nameLabel.addClass('required');\n                }\n                else {\n                    this.$nameLabel.removeClass('required');\n                }\n            },\n\n            onTypeSelectChange: function() {\n                this.setFieldType(this.$typeSelect.val());\n            },\n\n            setFieldType: function(type) {\n                // Update the Translation Method settings\n                Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n                if (this.selectedFieldType) {\n                    this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n                }\n\n                this.selectedFieldType = type;\n                this.$typeSelect.val(type);\n\n                // Show a spinner\n                this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n                this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                    this.$typeSettingsContainer.html('').append($settings);\n                    if (fresh) {\n                        Craft.initUiElements($settings);\n                        Craft.appendHeadHtml(headHtml);\n                        Craft.appendFootHtml(footHtml);\n                    }\n\n                    // In case Firefox was sleeping on the job\n                    this.$typeSettingsContainer.trigger('resize');\n                }).catch(() => {\n                    this.$typeSettingsContainer.html('');\n                });\n            },\n\n            getFieldTypeSettings: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                        resolve({\n                            fresh: false,\n                            $settings: this.initializedFieldTypeSettings[type],\n                        });\n                        return;\n                    }\n\n                    this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                        settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                        headHtml = this.getParsedFieldTypeHtml(headHtml);\n                        footHtml = this.getParsedFieldTypeHtml(footHtml);\n                        let $settings = $('<div/>').html(settingsHtml);\n                        this.initializedFieldTypeSettings[type] = $settings;\n                        resolve({\n                            fresh: true,\n                            $settings: $settings,\n                            headHtml: headHtml,\n                            footHtml: footHtml,\n                        });\n                    }).catch($.noop);\n                });\n            },\n\n            getParsedFieldTypeHtml: function(html) {\n                if (typeof html === 'string') {\n                    html = html.replace(/__BLOCK_TYPE__/g, this.blockType.id);\n                    html = html.replace(/__FIELD__/g, this.id);\n                }\n                else {\n                    html = '';\n                }\n\n                return html;\n            },\n\n            getDefaultFieldSettings: function() {\n                var $container = $('<div/>', {\n                    'data-id': this.id\n                });\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Name'),\n                    id: this.inputIdPrefix + '-name',\n                    name: this.inputNamePrefix + '[name]'\n                }).appendTo($container);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    id: this.inputIdPrefix + '-handle',\n                    'class': 'code',\n                    name: this.inputNamePrefix + '[handle]',\n                    maxlength: 64,\n                    required: true\n                }).appendTo($container);\n\n                Craft.ui.createTextareaField({\n                    label: Craft.t('app', 'Instructions'),\n                    id: this.inputIdPrefix + '-instructions',\n                    'class': 'nicetext',\n                    name: this.inputNamePrefix + '[instructions]'\n                }).appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'This field is required'),\n                    id: this.inputIdPrefix + '-required',\n                    name: this.inputNamePrefix + '[required]'\n                }).appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'Use this field’s values as search keywords'),\n                    id: this.inputIdPrefix + '-searchable',\n                    name: this.inputNamePrefix + '[searchable]',\n                    checked: true,\n                }).appendTo($container);\n\n                var fieldTypeOptions = [];\n\n                for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                    fieldTypeOptions.push({\n                        value: this.configurator.fieldTypeInfo[i].type,\n                        label: this.configurator.fieldTypeInfo[i].name\n                    });\n                }\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Field Type'),\n                    id: this.inputIdPrefix + '-type',\n                    name: this.inputNamePrefix + '[type]',\n                    options: fieldTypeOptions,\n                    value: 'craft\\\\fields\\\\PlainText'\n                }).appendTo($container);\n\n                if (Craft.isMultiSite) {\n                    var $translationSettingsContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-settings'\n                    }).appendTo($container);\n\n                    Craft.ui.createSelectField({\n                        label: Craft.t('app', 'Translation Method'),\n                        id: this.inputIdPrefix + '-translation-method',\n                        name: this.inputNamePrefix + '[translationMethod]',\n                        options: [],\n                        value: 'none',\n                        toggle: true,\n                        targetPrefix: this.inputIdPrefix + '-translation-method-'\n                    }).appendTo($translationSettingsContainer);\n\n                    var $translationKeyFormatContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-method-custom',\n                        'class': 'hidden'\n                    }).appendTo($translationSettingsContainer);\n\n                    Craft.ui.createTextField({\n                        label: Craft.t('app', 'Translation Key Format'),\n                        id: this.inputIdPrefix + '-translation-key-format',\n                        name: this.inputNamePrefix + '[translationKeyFormat]'\n                    }).appendTo($translationKeyFormatContainer);\n                }\n\n                $('<hr/>').appendTo($container);\n\n                $('<div/>', {\n                    'class': 'fieldtype-settings'\n                }).appendTo($container);\n\n                $('<hr/>').appendTo($container);\n\n                $('<a/>', {\n                    'class': 'error delete',\n                    text: Craft.t('app', 'Delete')\n                }).appendTo($container);\n\n                return $container;\n            },\n\n            confirmDelete: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                    this.selfDestruct();\n                }\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.blockType.fields[this.id] = null;\n                delete this.blockType.fields[this.id];\n            }\n        });\n})(jQuery);\n"]}