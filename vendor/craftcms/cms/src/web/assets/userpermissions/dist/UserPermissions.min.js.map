{"version":3,"sources":["userpermissions/src/UserPermissions.js"],"names":["$","Craft","UserPermissions","Garnish","Base","extend","$wrapper","$selectAllBtn","$allCheckboxes","$rootCheckboxes","wrapper","this","addListener","find","updateSelectAllBtn","toggleSelectAll","filter","ev","length","trigger","childrenCheckboxes","prop","checkbox","currentTarget","parent","userPermissions","text","t","each","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,gBAAAC,QAAAC,KAAAC,OACMH,CAEUI,SADZ,KAEIC,cAFJ,KAGIC,eAHJ,KAIIC,gBAJJ,KAOaH,KAAAA,SAAWI,GACXH,KAAAA,SAAkBG,EAClBF,KAAAA,cAAmBR,EAAA,cAAwBW,KAAKL,UAChDG,KAAAA,eAAyBH,EAAAA,uBAAeK,KAAAL,UAExCM,KAAAA,gBAAiBL,EAAtBI,KAAqCL,UAASO,KAAA,oCAGzCC,KAAAA,YAALH,KAAAJ,cAAA,QAAA,mBAfRI,KAAAC,YAAAD,KAAAH,eAAA,QAAA,kBAmBiBA,KAAAA,sBAILO,gBAAqBC,SAAOC,GAC/BN,KAAAH,eAAAQ,OAAA,YAAAE,OAAAP,KAAAH,eAAAU,OAJGP,KAAKH,eAAeQ,OAAO,kBAAkBG,QAAQ,SAS7CR,KAAAF,gBAAaO,OAAA,YAAAG,QAAA,SAGrBC,EAAAA,kBAGAA,eAAmBC,SAAKJ,GAEvB,IAAAK,EAAAtB,EAAAiB,EAAAM,eAEDH,GADkBE,EAAQE,OAAA,MAAYL,KAAtC,QACwBG,EAAxBE,OAAA,MAAAX,KAAA,qCALAS,EAASD,KAAK,WAQbP,EAALO,KAAA,YAAA,IAISb,EAAsBQ,OAAA,YAAqBG,QAAKX,SAChDD,EAAmBc,KAAQ,YAAO,IAI1CV,KAAAG,sBAITW,mBAAoB,WAEjBA,KAAPjB,eAAmCQ,OAAA,YAAAE,OAAAP,KAAAH,eAAAU,OACrBhB,KAAAA,cAAVwB,KAAAzB,MAAA0B,EAAA,MAAA,eARYhB,KAAKJ,cAAcmB,KAAKzB,MAAM0B,EAAE,MAAO,oBAKvD,IAAIF,EAAkBzB,EAAE,qBAExBA,EAAE4B,KAAKH,GAAiB,WACpB,IAAIxB,MAAMC,gBAAgBS,SA9DlC,CAgEGkB","file":"UserPermissions.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.UserPermissions = Garnish.Base.extend(\n        {\n            $wrapper: null,\n            $selectAllBtn: null,\n            $allCheckboxes: null,\n            $rootCheckboxes: null,\n\n            init: function(wrapper) {\n                this.$wrapper = wrapper;\n                this.$selectAllBtn = $('.select-all', this.$wrapper);\n                this.$allCheckboxes = $('input[type=checkbox]', this.$wrapper);\n                this.$rootCheckboxes = $(this.$wrapper).find('> ul > li > input[type=checkbox]');\n\n                this.addListener(this.$selectAllBtn, 'click', 'toggleSelectAll');\n                this.addListener(this.$allCheckboxes, 'click', 'toggleCheckbox');\n\n                this.updateSelectAllBtn();\n            },\n\n            toggleSelectAll: function(ev) {\n                if (this.$allCheckboxes.filter(':checked').length < this.$allCheckboxes.length) {\n                    this.$allCheckboxes.filter(':not(:checked)').trigger('click');\n                }\n                else {\n                    this.$rootCheckboxes.filter(':checked').trigger('click');\n                }\n\n                ev.preventDefault();\n            },\n\n            toggleCheckbox: function(ev) {\n                var checkbox = $(ev.currentTarget);\n                var uls = checkbox.parent('li').find('> ul');\n                var childrenCheckboxes = checkbox.parent('li').find('> ul > li > input[type=checkbox]');\n\n                if (checkbox.prop('checked')) {\n                    childrenCheckboxes.prop('disabled', false);\n                }\n                else {\n                    childrenCheckboxes.filter(':checked').trigger('click');\n                    childrenCheckboxes.prop('disabled', true);\n                }\n\n                this.updateSelectAllBtn();\n            },\n\n            updateSelectAllBtn: function() {\n                if (this.$allCheckboxes.filter(':checked').length < this.$allCheckboxes.length) {\n                    this.$selectAllBtn.text(Craft.t('app', 'Select All'));\n                }\n                else {\n                    this.$selectAllBtn.text(Craft.t('app', 'Deselect All'));\n                }\n            }\n        });\n\n    var userPermissions = $('.user-permissions');\n\n    $.each(userPermissions, function() {\n        new Craft.UserPermissions(this);\n    });\n})(jQuery);\n"]}